this.main=this.main||{},this.main.js=function(t){"use strict";function e(){e=function(){return t};var t={},r=Object.prototype,i=r.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function c(t,e,r,i){var a=e&&e.prototype instanceof m?e:m,s=Object.create(a.prototype),o=new A(i||[]);return n(s,"_invoke",{value:T(t,r,o)}),s}function v(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f={};function m(){}function h(){}function d(){}var p={};u(p,s,(function(){return this}));var g=Object.getPrototypeOf,y=g&&g(g(R([])));y&&y!==r&&i.call(y,s)&&(p=y);var w=d.prototype=m.prototype=Object.create(p);function b(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function r(n,a,s,o){var l=v(t[n],t,a);if("throw"!==l.type){var u=l.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?e.resolve(c.__await).then((function(t){r("next",t,s,o)}),(function(t){r("throw",t,s,o)})):e.resolve(c).then((function(t){u.value=t,s(u)}),(function(t){return r("throw",t,s,o)}))}o(l.arg)}var a;n(this,"_invoke",{value:function(t,i){function n(){return new e((function(e,n){r(t,i,e,n)}))}return a=a?a.then(n,n):n()}})}function T(t,e,r){var i="suspendedStart";return function(n,a){if("executing"===i)throw new Error("Generator is already running");if("completed"===i){if("throw"===n)throw a;return k()}for(r.method=n,r.arg=a;;){var s=r.delegate;if(s){var o=x(s,r);if(o){if(o===f)continue;return o}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===i)throw i="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);i="executing";var l=v(t,e,r);if("normal"===l.type){if(i=r.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(i="completed",r.method="throw",r.arg=l.arg)}}}function x(t,e){var r=e.method,i=t.iterator[r];if(void 0===i)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var n=v(i,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var a=n.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function R(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return n.next=n}}return{next:k}}function k(){return{value:void 0,done:!0}}return h.prototype=d,n(w,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=u(d,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,u(t,l,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},b(E.prototype),u(E.prototype,o,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,i,n,a){void 0===a&&(a=Promise);var s=new E(c(e,r,i,n),a);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},b(w),u(w,l,"Generator"),u(w,s,(function(){return this})),u(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var i in e)r.push(i);return r.reverse(),function t(){for(;r.length;){var i=r.pop();if(i in e)return t.value=i,t.done=!1,t}return t.done=!0,t}},t.values=R,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(P),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=void 0),!!i}for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var o=i.call(a,"catchLoc"),l=i.call(a,"finallyLoc");if(o&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(o){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=t,s.arg=e,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var i=r.completion;if("throw"===i.type){var n=i.arg;P(r)}return n}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:R(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function r(t,e,r,i,n,a,s){try{var o=t[a](s),l=o.value}catch(t){return void r(t)}o.done?e(l):Promise.resolve(l).then(i,n)}function i(t){return function(){var e=this,i=arguments;return new Promise((function(n,a){var s=t.apply(e,i);function o(t){r(s,n,a,o,l,"next",t)}function l(t){r(s,n,a,o,l,"throw",t)}o(void 0)}))}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,p(i.key),i)}}function s(t,e,r){return e&&a(t.prototype,e),r&&a(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function o(t,e,r){return(e=p(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&c(t,e)}function u(t){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},u(t)}function c(t,e){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},c(t,e)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,i=u(t);if(e){var n=u(this).constructor;r=Reflect.construct(i,arguments,n)}else r=i.apply(this,arguments);return function(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}(this,r)}}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=u(t)););return t}(t,e);if(i){var n=Object.getOwnPropertyDescriptor(i,e);return n.get?n.get.call(arguments.length<3?t:r):n.value}},m.apply(this,arguments)}function h(t){return function(t){if(Array.isArray(t))return d(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return d(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return d(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}function p(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,e||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:String(e)}var g;function y(){return new b}function w(t){g.shaderPromise.push(t)}function b(){var t=this;this.init=function(){},this.response=function(){},this.render=function(){},this.primitive={},this.shaderPromise=[],this.units=i(e().mark((function r(){return e().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return g=t,t.init(),e.abrupt("return",Promise.all(h(t.shaderPromise)).then((function(){window.requestAnimationFrame((function e(){try{t.response(),t.render()}catch(t){return void console.error("Error render")}window.requestAnimationFrame(e)}))})).catch((function(){console.log("Error initialization")})));case 3:case"end":return e.stop()}}),r)})))}var E=Math.PI/180,T=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L(),r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L();return A(P(e,t),P(r,t)).normalize()},x=s((function t(e,r,i){var a=this;n(this,t),o(this,"type","vec3"),o(this,"array",(function(){return[a.x,a.y,a.z]})),o(this,"length",(function(){var t=a.dot(a);return 1==t||0==t?t:Math.sqrt(t)})),o(this,"dot",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L();return t.x*a.x+t.y*a.y+t.z*a.z})),o(this,"div",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return a.x/=t,a.y/=t,a.z/=t,a})),o(this,"mul",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return a.x*=t,a.y*=t,a.z*=t,a})),o(this,"translete",(function(){return a.massiv=F(),a.massiv[0]=[1,0,0,0],a.massiv[1]=[0,1,0,0],a.massiv[2]=[0,0,1,0],a.massiv[3]=[a.x,a.y,a.z,1],a.massiv})),o(this,"normalize",(function(){var t=a.length();return 1===t||0===t||a.div(t),a}));try{this.x=e,this.y=r,this.z=i}catch(t){this.x=1,this.y=1,this.z=1}}));function _(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L();return L(t.x+e.x,t.y+e.y,t.z+e.z)}function P(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L();return L(t.x-e.x,t.y-e.y,t.z-e.z)}function A(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L();return L(t.y*e.z-t.z*e.y,t.z*e.x-t.x*e.z,t.x*e.y-t.y*e.x)}function R(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(1),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){var t=F(0);return t.massiv[0][0]=1,t.massiv[1][1]=1,t.massiv[2][2]=1,t.massiv[3][3]=1,t}();return L(t.x*e.massiv[0][0]+t.y*e.massiv[1][0]+t.z*e.massiv[2][0]+e.massiv[3][0],t.x*e.massiv[0][1]+t.y*e.massiv[1][1]+t.z*e.massiv[2][1]+e.massiv[3][1],t.x*e.massiv[0][2]+t.y*e.massiv[1][2]+t.z*e.massiv[2][2]+e.massiv[3][2])}function k(t){return t*E}function O(t){return t*(1/E)}function B(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:F(),r=F(0);return r.massiv[0][0]+=t.massiv[0][0]*e.massiv[0][0],r.massiv[0][0]+=t.massiv[0][1]*e.massiv[1][0],r.massiv[0][0]+=t.massiv[0][2]*e.massiv[2][0],r.massiv[0][0]+=t.massiv[0][3]*e.massiv[3][0],r.massiv[0][1]+=t.massiv[0][0]*e.massiv[0][1],r.massiv[0][1]+=t.massiv[0][1]*e.massiv[1][1],r.massiv[0][1]+=t.massiv[0][2]*e.massiv[2][1],r.massiv[0][1]+=t.massiv[0][3]*e.massiv[3][1],r.massiv[0][2]+=t.massiv[0][0]*e.massiv[0][2],r.massiv[0][2]+=t.massiv[0][1]*e.massiv[1][2],r.massiv[0][2]+=t.massiv[0][2]*e.massiv[2][2],r.massiv[0][2]+=t.massiv[0][3]*e.massiv[3][2],r.massiv[0][3]+=t.massiv[0][0]*e.massiv[0][3],r.massiv[0][3]+=t.massiv[0][1]*e.massiv[1][3],r.massiv[0][3]+=t.massiv[0][2]*e.massiv[2][3],r.massiv[0][3]+=t.massiv[0][3]*e.massiv[3][3],r.massiv[1][0]+=t.massiv[1][0]*e.massiv[0][0],r.massiv[1][0]+=t.massiv[1][1]*e.massiv[1][0],r.massiv[1][0]+=t.massiv[1][2]*e.massiv[2][0],r.massiv[1][0]+=t.massiv[1][3]*e.massiv[3][0],r.massiv[1][1]+=t.massiv[1][0]*e.massiv[0][1],r.massiv[1][1]+=t.massiv[1][1]*e.massiv[1][1],r.massiv[1][1]+=t.massiv[1][2]*e.massiv[2][1],r.massiv[1][1]+=t.massiv[1][3]*e.massiv[3][1],r.massiv[1][2]+=t.massiv[1][0]*e.massiv[0][2],r.massiv[1][2]+=t.massiv[1][1]*e.massiv[1][2],r.massiv[1][2]+=t.massiv[1][2]*e.massiv[2][2],r.massiv[1][2]+=t.massiv[1][3]*e.massiv[3][2],r.massiv[1][3]+=t.massiv[1][0]*e.massiv[0][3],r.massiv[1][3]+=t.massiv[1][1]*e.massiv[1][3],r.massiv[1][3]+=t.massiv[1][2]*e.massiv[2][3],r.massiv[1][3]+=t.massiv[1][3]*e.massiv[3][3],r.massiv[2][0]+=t.massiv[2][0]*e.massiv[0][0],r.massiv[2][0]+=t.massiv[2][1]*e.massiv[1][0],r.massiv[2][0]+=t.massiv[2][2]*e.massiv[2][0],r.massiv[2][0]+=t.massiv[2][3]*e.massiv[3][0],r.massiv[2][1]+=t.massiv[2][0]*e.massiv[0][1],r.massiv[2][1]+=t.massiv[2][1]*e.massiv[1][1],r.massiv[2][1]+=t.massiv[2][2]*e.massiv[2][1],r.massiv[2][1]+=t.massiv[2][3]*e.massiv[3][1],r.massiv[2][2]+=t.massiv[2][0]*e.massiv[0][2],r.massiv[2][2]+=t.massiv[2][1]*e.massiv[1][2],r.massiv[2][2]+=t.massiv[2][2]*e.massiv[2][2],r.massiv[2][2]+=t.massiv[2][3]*e.massiv[3][2],r.massiv[2][3]+=t.massiv[2][0]*e.massiv[0][3],r.massiv[2][3]+=t.massiv[2][1]*e.massiv[1][3],r.massiv[2][3]+=t.massiv[2][2]*e.massiv[2][3],r.massiv[2][3]+=t.massiv[2][3]*e.massiv[3][3],r.massiv[3][0]+=t.massiv[3][0]*e.massiv[0][0],r.massiv[3][0]+=t.massiv[3][1]*e.massiv[1][0],r.massiv[3][0]+=t.massiv[3][2]*e.massiv[2][0],r.massiv[3][0]+=t.massiv[3][3]*e.massiv[3][0],r.massiv[3][1]+=t.massiv[3][0]*e.massiv[0][1],r.massiv[3][1]+=t.massiv[3][1]*e.massiv[1][1],r.massiv[3][1]+=t.massiv[3][2]*e.massiv[2][1],r.massiv[3][1]+=t.massiv[3][3]*e.massiv[3][1],r.massiv[3][2]+=t.massiv[3][0]*e.massiv[0][2],r.massiv[3][2]+=t.massiv[3][1]*e.massiv[1][2],r.massiv[3][2]+=t.massiv[3][2]*e.massiv[2][2],r.massiv[3][2]+=t.massiv[3][3]*e.massiv[3][2],r.massiv[3][3]+=t.massiv[3][0]*e.massiv[0][3],r.massiv[3][3]+=t.massiv[3][1]*e.massiv[1][3],r.massiv[3][3]+=t.massiv[3][2]*e.massiv[2][3],r.massiv[3][3]+=t.massiv[3][3]*e.massiv[3][3],r}var I=s((function t(e,r,i,a,s,o,l,u){n(this,t);try{this.massiv=[[].concat(h(e.array()),[r]),[].concat(h(i.array()),[a]),[].concat(h(s.array()),[o]),[].concat(h(l.array()),[u])]}catch(t){this.massiv=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}}));function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(1,0,0),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L(0,1,0),i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:L(0,0,1),a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:L(0,0,0),o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:1;return"number"==typeof t&&(e=i=a=o=t,t=r=n=s=L(t)),new I(t,e,r,i,n,a,s,o)}function L(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if("number"==typeof t&&null===e)e=r=t;else if(null===t&&null===e)t=e=r=1;else if("string"==typeof t&&null===e){if("number"!=typeof(t=parseFloat(t)))return;e=r=t}else"object"==typeof t&&null===e&&(e=t.y,r=t.z,t=t.x);return new x(t,e,r)}var S=new function(){var t=this;return this.responsemouse=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null===e)return t.mdx=0,void(t.mdy=0);t.mdx=e.clientX-t.mx,t.mdy=e.clientY-t.my,t.mx=e.clientX,t.my=e.clientY},this.responsemousewheel=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null!==e?(e.deltaY>0?t.wheel=1.125:t.wheel=-1.125,t.mz+=t.wheel,t.mdz=t.wheel):t.mdz=0},this.responsemouseclick=function(e){var r;if(2===e.button)r="rmouse";else{if(0!==e.button)return;r="lmouse"}void 0===t.keyboard["".concat(r)]?t.keyboard["".concat(r)]=1:1===t.keyboard["".concat(r)]?t.keyboard["".concat(r)]=0:t.keyboard["".concat(r)]=1},this.keys=function(e){return void 0===t.keyboard[e]?0:t.keyboard[e]},this.responsekeys=function(e){1===t.keyboard[e.key]?t.keyboard[e.key]=0:t.keyboard[e.key]=1},this.responsecamera=function(){if(t.keys("x")){var e=.01,r=P(t.at,t.loc).length(),i=(t.loc.y-t.at.y)/r,n=Math.sqrt(1-i*i),a=r*n,s=(t.loc.z-t.at.z)/a,o=(t.loc.x-t.at.x)/a,l=O(Math.atan2(o,s)),u=O(Math.atan2(n,i));if(l+=.03*(-30*t.keys("lmouse")*t.mdx+447*(t.keys("d")-t.keys("a"))),(u+=.02*(-300*t.keys("lmouse")*t.mdy+447*(t.keys("s")-t.keys("w"))))<.08&&(u=.08),u>178.9&&(u=178.9),(r+=e*(1+208*t.keys("Shift"))*(1*t.mdz+80*(t.keys("PageUp")-t.keys("PageDown"))))<.1&&(r=.1),t.keys("rmouse")){var c,v,f=L(0);c=-t.mdx*t.wp/canvas.width*r/t.projdist,v=t.mdy*t.hp/canvas.height*r/t.projdist,f=_(L(t.right).mul(c),L(t.up).mul(v)),t.at=_(t.at,f),t.loc=_(t.loc,f)}t.set(R(L(0,r,0),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:F(),r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:F();return B(B(t,e),r)}(function(){var t=k(arguments.length>0&&void 0!==arguments[0]?arguments[0]:0),e=F(0);return e.massiv=[[1,0,0,0],[0,Math.cos(t),Math.sin(t),0],[0,-Math.sin(t),Math.cos(t),0],[0,0,0,1]],e}(u),function(){var t=k(arguments.length>0&&void 0!==arguments[0]?arguments[0]:0),e=F(0);return e.massiv=[[Math.cos(t),0,-Math.sin(t),0],[0,1,0,0],[Math.sin(t),0,Math.cos(t),0],[0,0,0,1]],e}(l),L(t.at).translete())),t.at,L(0,1,0))}},this.set=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(8),r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L(0),i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L(0,1,0);t.view=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:L(5,5,5),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L(0,0,0),r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L(0,1,0),i=P(e,t).normalize(),n=A(i,r).normalize(),a=A(n,i),s=F();return s.massiv=[[n.x,a.x,-i.x,0],[n.y,a.y,-i.y,0],[n.z,a.z,-i.z,0],[-t.dot(n),-t.dot(a),t.dot(i),1]],s}(e,r,i),t.vp=B(t.view,t.proj),t.dir=L(-t.view.massiv[0][2],-t.view.massiv[1][2],-t.view.massiv[2][2]),t.loc=e,t.at=r,t.up=L(t.view.massiv[0][1],t.view.massiv[1][1],t.view.massiv[2][1]),t.right=L(t.view.massiv[0][0],t.view.massiv[1][0],t.view.massiv[2][0])},this.hp=this.wp=this.projsize=this.projdist=.1,this.projfarclip=3e4,this.proj=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-.5,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-.5,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:10,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:300,s=F();return s.massiv=[[2*n/(e-t),0,0,0],[0,2*n/(i-r),0,0],[(e+t)/(e-t),(i+r)/(i-r),-(a+n)/(a-n),-1],[0,0,-2*n*a/(a-n),0]],s}(-this.wp/2,this.wp/2,-this.hp/2,this.hp/2,this.projdist,this.projfarclip),this.mx=this.my=this.mz=this.mdz=this.wheel=this.mdx=this.mdy=0,this.keyboard=[],this.set(L(15,15,15)),this};var U,j=new function(){var t=this,e=function(){var t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=e();t.globalTime=i,t.globalDeltaTime=i-t.oldTime,t.isPause?(t.localDeltaTime=0,t.pauseTime+=i-t.oldTime):(t.localDeltaTime=t.globalDeltaTime,t.localTime=i-t.pauseTime-t.startTime),t.frameCounter++,i-t.oldTimeFPS>3&&(t.FPS=t.frameCounter/(i-t.oldTimeFPS),t.oldTimeFPS=i,t.frameCounter=0,null!=r&&(document.getElementById(r).innerHTML=t.getFPS())),t.oldTime=i},this.getFPS=function(){return t.FPS.toFixed(3)},this.globalTime=this.localTime=e(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this};var z=(o(U={"Black Plastic":[[0,0,0],1,[.01,.01,.01],[.5,.5,.5],32],Brass:[[.329412,.223529,.027451],[.780392,.568627,.113725],[.992157,.941176,.807843],27.8974],Bronze:[[.2125,.1275,.054],[.714,.4284,.18144],[.393548,.271906,.166721],25.6],Chrome:[[.25,.25,.25],[.4,.4,.4],[.774597,.774597,.774597],76.8],Copper:[[.19125,.0735,.0225],[.7038,.27048,.0828],[.256777,.137622,.086014],12.8],Gold:[[.24725,.1995,.0745],[.75164,.60648,.22648],[.628281,.555802,.366065],51.2],Peweter:[[.10588,.058824,.113725],[.427451,.470588,.541176],[.3333,.3333,.521569],9.84615],Silver:[[.19225,.19225,.19225],[.50754,.50754,.50754],[.508273,.508273,.508273],51.2],"Polished Silver":[[.23125,.23125,.23125],[.2775,.2775,.2775],[.773911,.773911,.773911],89.6],Turquoise:[[.1,.18725,.1745],[.396,.74151,.69102],[.297254,.30829,.306678],12.8],Ruby:[[.1745,.01175,.01175],[.61424,.04136,.04136],[.727811,.626959,.626959],76.8],"Polished Gold":[[.24725,.2245,.0645],[.34615,.3143,.0903],[.797357,.723991,.208006],83.2],"Polished Bronze":[[.25,.148,.06475],[.4,.2368,.1036],[.774597,.458561,.200621],76.8],"Polished Copper":[[.2295,.08825,.0275],[.5508,.2118,.066],[.580594,.223257,.0695701],51.2],Jade:[[.135,.2225,.1575],[.135,.2225,.1575],[.316228,.316228,.316228],12.8],Obsidian:[[.05375,.05,.06625],[.18275,.17,.22525],[.332741,.328634,.346435],38.4],Pearl:[[.25,.20725,.20725],[1,.829,.829],[.296648,.296648,.296648],11.264],Emerald:[[.0215,.1745,.0215],[.07568,.61424,.07568],[.633,.727811,.633],76.8]},"Black Plastic",[[0,0,0],[.01,.01,.01],[.5,.5,.5],32]),o(U,"Black Rubber",[[.02,.02,.02],[.01,.01,.01],[.4,.4,.4],10]),U);var D=y();D.init=function(){D.primitive.a1={},D.primitive.a1.file="./background",D.primitive.a1.idCanvas="glCanvas",D.primitive.a1.type="tristrip";var t,e=void 0===z[t="Obsidian"]?(console.log("errror name material"),{Ka:[.1,.1,.1,1],Kd:[.9,.9,.9,1],Ks:[.3,.3,.3,30]}):{Ka:[].concat(h(z[t][0]),[1]),Kd:[].concat(h(z[t][1]),[1]),Ks:[].concat(h(z[t][2]),[z[t][3]])};D.primitive.a1.buffer={in_pos:[-1,-1,0,-1,1,0,1,-1,0,1,1,0],in_normal:[1,.5,.1,.1,.5,.6,.2,.4,.5,.3,.9,1]},D.primitive.a1.uniform={frameBuffer:function(){return S.vp.massiv},materialBuffer:e}},D.render=function(){S.responsecamera(),S.responsemousewheel(),S.responsemouse(),j.response("fps")};var N=function(t){l(r,t);var e=f(r);function r(t,i){var a,s;return n(this,r),o(v(s=e.call(this,t,gl.TEXTURE_2D,i)),"apply",m((a=v(s),u(r.prototype)),"apply",a)),s.img.onload=function(){gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,s.img),gl.generateMipmap(gl.TEXTURE_2D),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),s.value=1},gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,s.img),s}return s(r)}(function(){function t(e,r,i){n(this,t),this.type=r,this.id=gl.createTexture(),gl.bindTexture(this.type,this.id),gl.texImage2D(this.type,0,gl.RGBA,1,1,0,gl.RGBA,gl.UNSIGNED_BYTE,new Uint8Array([255,255,255,0])),this.img=new Image,this.img.src=e,this.loc=i,this.value=0}return s(t,[{key:"apply",value:function(t){gl.activeTexture(gl.TEXTURE0+t),gl.bindTexture(this.type,this.id),gl.uniform1i(this.loc,t)}}]),t}()),M=function(t){l(r,t);var e=f(r);function r(t,i,a){return n(this,r),e.call(this,gl.TEXTURE_2D,t,i,a)}return s(r)}(s((function t(e,r,i,a){n(this,t),this.width=i,this.type=e,this.height=a,this.loc=r,this.id=gl.createTexture(),gl.bindTexture(this.type,this.id),gl.texImage2D(this.type,0,gl.RGBA,i,a,0,gl.RGBA,gl.UNSIGNED_BYTE,null),gl.generateMipmap(this.type),gl.texParameteri(this.type,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(this.type,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.texParameteri(this.type,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR),gl.texParameteri(this.type,gl.TEXTURE_MAG_FILTER,gl.LINEAR)}))),C=0,G=function(t){l(r,t);var e=f(r);function r(t,i,a){var s;return n(this,r),(s=e.call(this,t,i,a)).fb=gl.createFramebuffer(),s}return s(r,[{key:"turnon",value:function(){gl.bindFramebuffer(gl.FRAMEBUFFER,this.fb),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+C,gl.TEXTURE_2D,this.id,0),C++}},{key:"turnoff",value:function(){gl.bindFramebuffer(gl.FRAMEBUFFER,null),C--}},{key:"apply",value:function(t){gl.activeTexture(gl.TEXTURE0+t),gl.bindTexture(this.type,this.id),gl.uniform1i(this.loc,t)}}]),r}(M),X=function(){function t(e,r){n(this,t),this.type=e,this.id=gl.createBuffer(),gl.bindBuffer(this.type,this.id),gl.bufferData(this.type,r,gl.STATIC_DRAW)}return s(t,[{key:"update",value:function(t){gl.bindBuffer(this.type,this.id),gl.bufferSubData(this.type,0,t,0)}},{key:"apply",value:function(){gl.bindBuffer(this.type,this.id)}}]),t}(),V=function(t){l(r,t);var e=f(r);function r(t,i,a,s){var o;return n(this,r),(o=e.call(this,gl.UNIFORM_BUFFER,s)).name=t,o.index=i,o.bind=a,o}return s(r,[{key:"update",value:function(t){m(u(r.prototype),"update",this).call(this,new Float32Array(t))}},{key:"apply",value:function(t){m(u(r.prototype),"apply",this).call(this),gl.uniformBlockBinding(t,this.index,this.bind),gl.bindBufferBase(gl.UNIFORM_BUFFER,this.bind,this.id)}}]),r}(X),K=function(t){l(r,t);var e=f(r);function r(t){var i,a;return n(this,r),o(v(a=e.call(this,gl.ARRAY_BUFFER,new Float32Array(t))),"apply",m((i=v(a),u(r.prototype)),"apply",i)),a.numOfVertices=t.length,a}return s(r,[{key:"update",value:function(t){m(u(r.prototype),"update",this).call(this,new Float32Array(t))}}]),r}(X),Y=function(t){l(r,t);var e=f(r);function r(t){var i,a;return n(this,r),o(v(a=e.call(this,gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(t))),"apply",m((i=v(a),u(r.prototype)),"apply",i)),a.numOfIndices=t.length,a}return s(r,[{key:"update",value:function(t){m(u(r.prototype),"update",this).call(this,new Uint32Array(t))}}]),r}(X);function H(t,e,r){var i=t.createShader(e);return t.shaderSource(i,r),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)||console.log("dont't load shader"),i}function q(){return this}function W(t){if(Array.isArray(t)){var e=[];return t.forEach((function(t){Array.isArray(t)?e.push.apply(e,h(t)):e.push.apply(e,h(W(t)))})),e}if("function"==typeof t)return W(t());if("object"==typeof t){var r=[];if("vec3"===t.type)r=[t.x,t.y,t.z];else for(var i in t){var n;(n=r).push.apply(n,h(W(t[i])))}return r}return"number"==typeof t?[t]:void 0}function J(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null!==e){if(void 0!==e.file){void 0===e.uniform&&(e.uniform={}),void 0===e.buffer&&(e.buffer={}),void 0===e.texture&&(e.texture={});return e.draw=function(){gl=e.idCanvas,gl.useProgram(t.shaderProgram);!function(){for(var r in e.uniformBlocks)e.uniformBlocks[r].update(W(e.uniform[r])),e.uniformBlocks[r].apply(t.shaderProgram);var i=0;for(var n in e.texture)e.texture[n].apply(i++)}(),gl.bindVertexArray(t.vertexArray),e.inctance<2?void 0!==e.buffer.index?(e.buffer.index.apply(),gl.drawElements(e.type,e.numOfVerices,gl.UNSIGNED_SHORT,0)):gl.drawArrays(e.type,0,e.numOfVerices):void 0!==e.buffer.index?(e.buffer.index.apply(),gl.drawElementsInstanced(e.type,e.numOfVerices,gl.UNSIGNED_SHORT,0,e.inctance)):gl.drawArraysInstanced(e.type,0,e.numOfVerices,e.inctance)},function(t,e){var r,i;return new Promise((function(n,a){if(""!==e){var s=fetch("".concat(e,"/vert.glsl")).then((function(t){return t.text()})).then((function(t){r=t})),o=fetch("".concat(e,"/frag.glsl")).then((function(t){return t.text()})).then((function(t){i=t}));Promise.all([s,o]).then((function(){var e=H(t,t.VERTEX_SHADER,r),s=H(t,t.FRAGMENT_SHADER,i),o=t.createProgram();if(t.attachShader(o,e),t.attachShader(o,s),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS)){var l=t.getProgramInfoLog(o);alert(l),a(null)}for(var u={attrs:{},uniforms:{},uniformBlocks:{}},c=t.getProgramParameter(o,t.ACTIVE_ATTRIBUTES),v=0;v<c;v++){var f=t.getActiveAttrib(o,v);u.attrs[f.name]={name:f.name,type:f.type,size:f.size,loc:t.getAttribLocation(o,f.name)}}for(var m=t.getProgramParameter(o,t.ACTIVE_UNIFORMS),h=0;h<m;h++){var d=t.getActiveUniform(o,h),p=t.getUniformLocation(o,d.name);u.uniforms[d.name]={name:d.name,type:d.type,size:d.size,loc:p}}for(var g=t.getProgramParameter(o,t.ACTIVE_UNIFORM_BLOCKS),y=0;y<g;y++){var w=t.getActiveUniformBlockName(o,y),b=t.getUniformBlockIndex(o,w),E=t.getActiveUniformBlockParameter(o,b,t.UNIFORM_BLOCK_BINDING);u.uniformBlocks[w]={name:w,index:b,size:t.getActiveUniformBlockParameter(o,b,t.UNIFORM_BLOCK_DATA_SIZE),bind:E}}n([o,u])}))}else n(0)}))}(gl,e.file).then((function(r){if("number"!=typeof e.inctance&&(e.inctance=1),gl=e.idCanvas,e.type=function(t,e){return"number"==typeof e?e:"trimesh"===e?t.TRIANGLES:"tristrip"===e?t.TRIANGLE_STRIP:"linestrip"===e?t.LINE_STRIP:t.POINTS}(gl,e.type),gl=e.idCanvas,t.vertexArray=gl.createVertexArray(),gl.bindVertexArray(t.vertexArray),t.shaderProgram=r[0],void 0!==e.buffer.index)e.buffer.index=new Y(W(e.buffer.index)),e.numOfVerices=e.buffer.index.numOfIndices;else if("number"!=typeof e.numOfVerices)if(void 0===e.buffer.in_pos)console.log("don't know count of vertex point");else if(void 0!==r[1].attrs.in_pos){var i=1;35666===r[1].attrs.in_pos.type?i=4:35665===r[1].attrs.in_pos.type?i=3:35664===r[1].attrs.in_pos.type&&(i=2),e.numOfVerices=e.buffer.in_pos.length/i}else console.log("don't know count of vertex point");for(var n in r[1].attrs)n=r[1].attrs[n],void 0!==e.buffer[n.name]&&(e.buffer[n.name]=new K(W(e.buffer[n.name])),35666===n.type?gl.vertexAttribPointer(n.loc,4,gl.FLOAT,!1,0,0):35665===n.type?gl.vertexAttribPointer(n.loc,3,gl.FLOAT,!1,0,0):35664===n.type&&gl.vertexAttribPointer(n.loc,2,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(n.loc));var a=0;for(var s in e.uniformBlocks={},r[1].uniformBlocks)s=r[1].uniformBlocks[s],void 0!==e.uniform[s.name]&&(e.uniformBlocks[s.name]=new V(s.name,s.index,a,s.size),a++);for(var o in e.texture)if(void 0!==r[1].uniforms[o]){if(35678===r[1].uniforms[o].type){var l=e.texture[o].split("(");if("create_frameBuffer"===l[0]){var u=parseFloat(l[1]),c=parseFloat(l[1]);"number"==typeof u&&"number"===c&&(e.texture[o]=new G(r[1].uniforms[o].loc,u,c))}else if("create_texture_2D"===l[0]){var v=parseFloat(l[1]),f=parseFloat(l[1]);"number"==typeof v&&"number"===f&&(e.texture[o]=new M(r[1].uniforms[o].loc,v,f))}e.texture[o]=new N(e.texture[o],r[1].uniforms[o].loc)}}else delete e.texture[o]}))}console.log("Primitive's file absent")}else console.log("You take me null primitive")}var Z={};function $(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"cow.obj",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null===r&&((t=new q).idCanvas="glCanvas",t.file="./icosahedron",t.type="trimesh",t.buffer={},t.uniform={materialBuffer:{Ka:[.1,.1,.1,1],Kd:[.9,.9,.9,1],Ks:[.3,.3,.3,30]},frameBuffer:function(){return S.vp.massiv},cameraBuffer:function(){return[[].concat(h(S.loc.array()),[1]),[].concat(h(S.dir.array()),[1]),[].concat(h(S.right.array()),[1]),[].concat(h(S.up.array()),[1]),[j.localTime,j.globalDeltaTime,1,1]]}},r=t);var i=[],n=[];return w(new Promise((function(t){fetch(e).then((function(t){return t.text()})).then((function(e){for(var a=e.split("\n"),s=0,o=0,l=4;l<a.length;l++){var u=a[l].split(" ");if("v"===u[0]){for(var c=1;c<u.length;c++){var v=parseFloat(u[c]);i.push(v)}s++}else if("f"===u[0])for(var f=0,m=0,h=0,d=0,p=1;p<u.length;p++)(h=u[p].split("//")[0])<0?h=s+h:h--,0==f?m=h:(1==f||(n[o++]=m,n[o++]=d,n[o++]=h),d=h),f++}r.buffer.in_pos=i,r.buffer.index=n,r.buffer.in_normal=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"trimesh",i=[];if(null!==t&&0!==t.length){if("vec3"!==t[0].type){for(var n=[],a=0,s=0;s<t.length;s+=3)n[a++]=L(t[s],t[s+1],t[s+2]);t=n}for(var o=0;o<t.length;o++)i[o]=L(0);if(null!==e){var l=3;"trimesh"===r?l=3:"tristrip"===r&&(l=1);for(var u=0;u<e.length;u+=l){var c=T(t[e[u]],t[e[u+1]],t[e[u+2]]);i[e[u]]=_(c,i[e[u]]),i[e[u+1]]=_(c,i[e[u+1]]),i[e[u+2]]=_(c,i[e[u+2]])}}else{var v=3;"trimesh"===r?v=3:"tristrip"===r&&(v=1);for(var f=0;f<t.length;f+=v){var m=T(t[f],t[f+1],t[f+2]);i[f]=_(m,i[f]),i[f+1]=_(m,i[f+1]),i[f+2]=_(m,i[f+2])}}for(var h=0;h<t.length;h++)i[h].normalize();return i}}(i,n,"trimesh"),function(t){return new J(t)}(r).then((function(){t(0)}))}))}))),r}Z.init=function(){Z.a1={},Z.a1.file="./background",Z.a1.idCanvas="glCanvas",Z.a1.type="tristrip",Z.a1.texture={Tex1:"plato.png"};Z.a1.buffer={in_pos:[-1,-1,1,-1,1,1,1,-1,1,1,1,1],in_tex:[0,0,0,1,1,0,1,1]},Z.a1.uniform={texBuffer:function(){return[j.localTime,j.globalDeltaTime,Z.a1.texture.Tex1.value,1]}},w(new J(Z.a1))},Z.render=function(){Z.a1.draw()};var Q,tt=y();tt.init=function(){Z.init(),tt.primitive=$("./cow.obj")},tt.render=function(){gl.disable(gl.DEPTH_TEST),Z.render(),gl.enable(gl.DEPTH_TEST),tt.primitive.draw()},Object.defineProperty(window,"gl",{get:function(){return null!=window._gl&&null!=window._gl||(window._gl=canvas.getContext("webgl2")),window._gl},set:function(t){canvas=t,window._gl=canvas.getContext("webgl2")}}),Object.defineProperty(window,"canvas",{get:function(){return null!=window._canvas&&null!=window._canvas||(window._canvas=Q),window._canvas},set:function(t){window.OldidCanvas!==t&&(window._canvas=document.getElementById("".concat(t)),null===window._canvas&&(window._canvas=document.getElementById("glCanvas")),window.OldidCanvas=t)}});var et=[];function rt(){!function(){var t=1,e="glCanvas";for(gl=e;gl.clearColor(0,1,0,1),gl.clear(gl.COLOR_BUFFER_BIT),gl.clear(gl.DEPTH_BUFFER_BIT),gl.enable(gl.DEPTH_TEST),e="glCanvas".concat(t),gl=e,Q!==gl;)t++;et.push(tt,D)}(),et.forEach((function(t){t.units()}))}return window.addEventListener("load",(function(){Q=document.getElementById("glCanvas").getContext("webgl2"),S.hp=S.wp=S.projsize,canvas.width>canvas.height?S.wp*=canvas.width/canvas.height:S.hp*=canvas.height/canvas.width,rt(),window.onscroll=function(){return window.scroll(0,0)},window.addEventListener("mousedown",(function(t){S.responsemouseclick(t)})),window.addEventListener("mouseup",(function(t){S.responsemouseclick(t)})),window.addEventListener("mousemove",(function(t){S.responsemouse(t)})),window.addEventListener("keyup",(function(t){S.responsekeys(t)})),window.addEventListener("keydown",(function(t){S.responsekeys(t)})),window.addEventListener("wheel",(function(t){S.responsemousewheel(t),t.preventDefault()}))})),t.initGL=rt,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
